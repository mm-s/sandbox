#!/bin/bash

preset=testnet
preset2=TEST_NET
assembly=dual

host=$1
customer_pubkey=$2

echo "warning: overriding args with dummy input"
host=nem.mm-studios.com
customer_pubkey=50AC6D29B7E0BC919D4BC6AC2948E5997D798982A02EBE37BB919DBB7975C037

if [[ ! -x `which symbol-cli` ]]; then
	echo "Please install symbol-cli first. https://docs.symbolplatform.com/cli.html#cli"
	echo "tl;dr;"
	echo "sudo npn -g install symbol-cli"
	exit 1
fi


[[ -d server ]] && echo "server dir already exists." && exit 1


openssl="openssl"
openssl_req="openssl req -batch"
openssl_ca="openssl ca -batch"

function skder {
    sk=$1
    file=$2
    prefix="302e020100300506032b657004220420"
    lsk=`echo ${sk} | tr '[:upper:]' '[:lower:]'`
    echo ${prefix}${lsk} | xxd -r -p > $file
}


function certGenerate_leg1 {
	dir=$1
	sk_transport=$2
	shift
	[[ -d $dir ]] && echo "Error. dir $dir exists." && exit 1
	mkdir $dir
	pushd $dir > /dev/null
		#ca.cnf
		cat <<EOF>ca.cnf
[ca]
default_ca = CA_default

[CA_default]
new_certs_dir = ./new_certs
database = index.txt
serial   = serial.dat

private_key = ca.key.pem
certificate = ca.cert.pem

policy = policy_catapult

[policy_catapult]
commonName              = supplied

[req]
prompt = no
distinguished_name = dn

[dn]
CN = peer-node-1-account
EOF
		#node.cnf
		cat <<EOF> node.cnf
[req]
prompt = no
distinguished_name = dn

[dn]
CN = peer-node-1
EOF
#node.cnf -> private svr

		mkdir new_certs && chmod 700 new_certs
		touch index.txt

		# create node key
		if [[ "_$sk_transport" == "_" ]]; then
			echo "Warning: generating transport cert with new random private key"
			$openssl genpkey -out node.key.pem -outform PEM -algorithm ed25519
		else
			skder $sk_transport node.der
			cat node.der | $openssl pkey -inform DER -outform PEM -out node.key.pem
			rm node.der
		fi
#node.key.pem --> private-server
		$openssl pkey -inform pem -in node.key.pem -text -noout

		# create request
		$openssl_req -config node.cnf -key node.key.pem -new -out node.csr.pem
		$openssl_req  -text -noout -verify -in node.csr.pem
#node.csr.pem --> public

#		# CA side
#		# create serial
#		$openssl rand -hex 19 > ./serial.dat

#		# sign cert for 375 days
#		$openssl_ca -config ca.cnf -days 375 -notext -in node.csr.pem -out node.crt.pem
##node.crt.pem -->
#		$openssl verify -CAfile ca.cert.pem node.crt.pem
#
#		# finally create full crt
#		cat node.crt.pem ca.cert.pem > node.full.crt.pem
	popd > /dev/null
}


mkdir server
pushd server > /dev/null

	certGenerate_leg1 certs
	rm -rf msg1
	mkdir -p msg1
	cp certs/node.csr.pem msg1/


	customer_addr=`symbol-cli converter publicKeyToAddress -n $preset2 -p $customer_pubkey | sed "s/-//g"`



	cat << EOF > supernode.yml
nodes:
  - rewardProgram: SuperNode
    host: $host
    voting: true
EOF
	symbol-bootstrap config -p $preset -a $assembly -c supernode.yml --noPassword
	rm supernode.yml

	pushd target > /dev/null



	oldpubkey=`cat addresses.yml | grep "main:" -A2 | tail -n1 | sed "s/.*publicKey: \(.*\)/\1/"`
	echo "replacing $oldpubkey with $customer_pubkey"
	sed -i "s/$oldpubkey/$customer_pubkey/" nodes/api-node/cert/metadata.yml
	sed -i "s/$oldpubkey/$customer_pubkey/" nodes/api-node/broker-config/resources/peers-p2p.json
	sed -i "s/$oldpubkey/$customer_pubkey/" nodes/api-node/broker-config/resources/peers-api.json
	sed -i "s/$oldpubkey/$customer_pubkey/" nodes/api-node/server-config/resources/peers-p2p.json
	sed -i "s/$oldpubkey/$customer_pubkey/" nodes/api-node/server-config/resources/peers-api.json

	cat addresses.yml  | grep "main:" -B 100 > x
	cat << EOF >> x
            privateKey:
            publicKey: $customer_pubkey
            address: $customer_addr
EOF

	cat addresses.yml  | grep "transport:" -A1000000 >> x
	mv x addresses.yml
	popd > /dev/null

	#unsigned=`symbol-bootstrap link --noPassword --useKnownRestGateways | grep "=BEGIN TX====" -A1 | tail -n1`
	unsigned="FFFFFFFFFFFFFFFFFFFFFTXLINKS"
	echo $unsigned > msg1/unsigned_tx



	exit 0

	cat << EOF
==========================================================================
Instructions:

Send to the customer the following instructions:

Execute the command:
symbol-cli transaction cosign

Select "transaction payload(for off-chain tx)" when prompted.
Paste the following blob:
$unsigned

Enter the wallet password when asked.

The last output of the command will look like:
Co-signed transaction:{"parentHash":"B7E0AB247F11E8F454C04C41B338FB1029C8407224E58271D4B987DC4D455E46","signature":"0662BA5056BA5CA3DB3358A601AA0DD195C3B7ACC007CC83AF69E92F10360645CCE53FE5215896A2D1F79CC5F9BF5A035662905C853C7E38E30F9EBB7FE7BC0F","signerPublicKey":"50AC6D29B7E0BC919D4BC6AC2948E5997D798982A02EBE37BB919DBB7975C037","version":{"lower":0,"higher":0}}

send over to allnodes.

EOF

}



